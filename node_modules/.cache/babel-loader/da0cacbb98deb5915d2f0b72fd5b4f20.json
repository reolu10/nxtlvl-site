{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\nvar InViewFeature = /*#__PURE__*/function (_Feature) {\n  function InViewFeature() {\n    var _this;\n    _classCallCheck(this, InViewFeature);\n    _this = _callSuper(this, InViewFeature, arguments);\n    _this.hasEnteredView = false;\n    _this.isInView = false;\n    return _this;\n  }\n  _inherits(InViewFeature, _Feature);\n  return _createClass(InViewFeature, [{\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this2 = this;\n      this.unmount();\n      var _this$node$getProps = this.node.getProps(),\n        _this$node$getProps$v = _this$node$getProps.viewport,\n        viewport = _this$node$getProps$v === void 0 ? {} : _this$node$getProps$v;\n      var root = viewport.root,\n        rootMargin = viewport.margin,\n        _viewport$amount = viewport.amount,\n        amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n        once = viewport.once;\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n        if (_this2.isInView === isIntersecting) return;\n        _this2.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n        if (once && !isIntersecting && _this2.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this2.hasEnteredView = true;\n        }\n        if (_this2.node.animationState) {\n          _this2.node.animationState.setActive(\"whileInView\", isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n        var _this2$node$getProps = _this2.node.getProps(),\n          onViewportEnter = _this2$node$getProps.onViewportEnter,\n          onViewportLeave = _this2$node$getProps.onViewportLeave;\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n        props = _this$node.props,\n        prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n}(Feature);\nfunction hasViewportOptionChanged(_ref) {\n  var _ref$viewport = _ref.viewport,\n    viewport = _ref$viewport === void 0 ? {} : _ref$viewport;\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$viewport = _ref2.viewport,\n    prevViewport = _ref2$viewport === void 0 ? {} : _ref2$viewport;\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\nexport { InViewFeature };","map":{"version":3,"names":["Feature","observeIntersection","thresholdNames","some","all","InViewFeature","_Feature","_this","_classCallCheck","_callSuper","arguments","hasEnteredView","isInView","_inherits","_createClass","key","value","startObserver","_this2","unmount","_this$node$getProps","node","getProps","_this$node$getProps$v","viewport","root","rootMargin","margin","_viewport$amount","amount","once","options","current","undefined","threshold","onIntersectionUpdate","entry","isIntersecting","animationState","setActive","_this2$node$getProps","onViewportEnter","onViewportLeave","callback","mount","update","IntersectionObserver","_this$node","props","prevProps","hasOptionsChanged","hasViewportOptionChanged","_ref","_ref$viewport","_ref2","length","_ref2$viewport","prevViewport","name"],"sources":["C:/Users/manuel/Desktop/nxtlvl-site/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs"],"sourcesContent":["import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}