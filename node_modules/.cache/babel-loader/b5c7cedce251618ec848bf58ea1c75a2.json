{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\manuel\\\\Desktop\\\\nxtlvl-site\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n  return _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$snapToCursor = _ref.snapToCursor,\n        snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      var presenceContext = this.visualElement.presenceContext;\n      if (presenceContext && presenceContext.isPresent === false) return;\n      var onSessionStart = function onSessionStart(event) {\n        var _this$getProps = _this.getProps(),\n          dragSnapToOrigin = _this$getProps.dragSnapToOrigin;\n        // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        dragSnapToOrigin ? _this.pauseAnimation() : _this.stopAnimation();\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n      var onStart = function onStart(event, info) {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        var _this$getProps2 = _this.getProps(),\n          drag = _this$getProps2.drag,\n          dragPropagation = _this$getProps2.dragPropagation,\n          onDragStart = _this$getProps2.onDragStart;\n        if (drag && !dragPropagation) {\n          if (_this.openGlobalLock) _this.openGlobalLock();\n          _this.openGlobalLock = getGlobalLock(drag);\n          // If we don 't have the lock, don't start dragging\n          if (!_this.openGlobalLock) return;\n        }\n        _this.isDragging = true;\n        _this.currentDirection = null;\n        _this.resolveConstraints();\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n        eachAxis(function (axis) {\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n          if (percent.test(current)) {\n            var projection = _this.visualElement.projection;\n            if (projection && projection.layout) {\n              var measuredAxis = projection.layout.layoutBox[axis];\n              if (measuredAxis) {\n                var length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n          _this.originPoint[axis] = current;\n        });\n        // Fire onDragStart event\n        if (onDragStart) {\n          frame.update(function () {\n            return onDragStart(event, info);\n          }, false, true);\n        }\n        var animationState = _this.visualElement.animationState;\n        animationState && animationState.setActive(\"whileDrag\", true);\n      };\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps3 = _this.getProps(),\n          dragPropagation = _this$getProps3.dragPropagation,\n          dragDirectionLock = _this$getProps3.dragDirectionLock,\n          onDirectionLock = _this$getProps3.onDirectionLock,\n          onDrag = _this$getProps3.onDrag;\n        // If we didn't successfully receive the gesture lock, early return.\n        if (!dragPropagation && !_this.openGlobalLock) return;\n        var offset = info.offset;\n        // Attempt to detect drag direction if directionLock is true\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset);\n          // If we've successfully set a direction, notify listener\n          if (_this.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(_this.currentDirection);\n          }\n          return;\n        }\n        // Update each point with the latest position\n        _this.updateAxis(\"x\", info.point, offset);\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n        _this.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n        onDrag && onDrag(event, info);\n      };\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n      var resumeAnimation = function resumeAnimation() {\n        return eachAxis(function (axis) {\n          var _a;\n          return _this.getAnimationState(axis) === \"paused\" && ((_a = _this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n      };\n      var _this$getProps4 = this.getProps(),\n        dragSnapToOrigin = _this$getProps4.dragSnapToOrigin;\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd,\n        resumeAnimation: resumeAnimation\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint(),\n        dragSnapToOrigin: dragSnapToOrigin,\n        contextWindow: getContextWindow(this.visualElement)\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n      var _this$getProps5 = this.getProps(),\n        onDragEnd = _this$getProps5.onDragEnd;\n      if (onDragEnd) {\n        frame.update(function () {\n          return onDragEnd(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isDragging = false;\n      var _this$visualElement = this.visualElement,\n        projection = _this$visualElement.projection,\n        animationState = _this$visualElement.animationState;\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n      var _this$getProps6 = this.getProps(),\n        dragPropagation = _this$getProps6.dragPropagation;\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n      animationState && animationState.setActive(\"whileDrag\", false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps7 = this.getProps(),\n        drag = _this$getProps7.drag;\n      // If we're not dragging this axis, do an early return.\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis];\n      // Apply constraints\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n      var _a;\n      var _this$getProps8 = this.getProps(),\n        dragConstraints = _this$getProps8.dragConstraints,\n        dragElastic = _this$getProps8.dragElastic;\n      var layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n      var prevConstraints = this.constraints;\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps9 = this.getProps(),\n        constraints = _this$getProps9.dragConstraints,\n        onMeasureDragConstraints = _this$getProps9.onMeasureDragConstraints;\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection;\n      // TODO\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n      var _this$getProps10 = this.getProps(),\n        drag = _this$getProps10.drag,\n        dragMomentum = _this$getProps10.dragMomentum,\n        dragElastic = _this$getProps10.dragElastic,\n        dragTransition = _this$getProps10.dragTransition,\n        dragSnapToOrigin = _this$getProps10.dragSnapToOrigin,\n        onDragTransitionEnd = _this$getProps10.onDragTransitionEnd;\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n        var transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n        var inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition);\n        // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n        return _this3.startAxisValueAnimation(axis, inertia);\n      });\n      // Run all animations and then resolve the new drag constraints.\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n  }, {\n    key: \"pauseAnimation\",\n    value: function pauseAnimation() {\n      var _this5 = this;\n      eachAxis(function (axis) {\n        var _a;\n        return (_a = _this5.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n      });\n    }\n  }, {\n    key: \"getAnimationState\",\n    value: function getAnimationState(axis) {\n      var _a;\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var dragKey = \"_drag\" + axis.toUpperCase();\n      var props = this.visualElement.getProps();\n      var externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this6 = this;\n      eachAxis(function (axis) {\n        var _this6$getProps = _this6.getProps(),\n          drag = _this6$getProps.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, _this6.currentDirection)) return;\n        var projection = _this6.visualElement.projection;\n        var axisValue = _this6.getAxisMotionValue(axis);\n        if (projection && projection.layout) {\n          var _projection$layout$la = projection.layout.layoutBox[axis],\n            min = _projection$layout$la.min,\n            max = _projection$layout$la.max;\n          axisValue.set(point[axis] - mix(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this7 = this;\n      if (!this.visualElement.current) return;\n      var _this$getProps11 = this.getProps(),\n        drag = _this$getProps11.drag,\n        dragConstraints = _this$getProps11.dragConstraints;\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this7.getAxisMotionValue(axis);\n        if (axisValue) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this7.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n      var _this$visualElement$g = this.visualElement.getProps(),\n        transformTemplate = _this$visualElement$g.transformTemplate;\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n        var axisValue = _this7.getAxisMotionValue(axis);\n        var _this7$constraints$ax = _this7.constraints[axis],\n          min = _this7$constraints$ax.min,\n          max = _this7$constraints$ax.max;\n        axisValue.set(mix(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this8 = this;\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this8$getProps = _this8.getProps(),\n          drag = _this8$getProps.drag,\n          _this8$getProps$dragL = _this8$getProps.dragListener,\n          dragListener = _this8$getProps$dragL === void 0 ? true : _this8$getProps$dragL;\n        drag && dragListener && _this8.start(event);\n      });\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this8$getProps2 = _this8.getProps(),\n          dragConstraints = _this8$getProps2.dragConstraints;\n        if (isRefObject(dragConstraints)) {\n          _this8.constraints = _this8.resolveRefConstraints();\n        }\n      };\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n      measureDragConstraints();\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this8.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref2) {\n        var delta = _ref2.delta,\n          hasLayoutChanged = _ref2.hasLayoutChanged;\n        if (_this8.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this8.getAxisMotionValue(axis);\n            if (!motionValue) return;\n            _this8.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n          _this8.visualElement.render();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n        drag = _props$drag === void 0 ? false : _props$drag,\n        _props$dragDirectionL = props.dragDirectionLock,\n        dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n        _props$dragPropagatio = props.dragPropagation,\n        dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n        _props$dragConstraint = props.dragConstraints,\n        dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n        _props$dragElastic = props.dragElastic,\n        dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n        _props$dragMomentum = props.dragMomentum,\n        dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","calcViewportConstraints","defaultElastic","rebaseAxisConstraints","calcOrigin","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mix","percent","animateMotionValue","getContextWindow","frame","elementDragControls","WeakMap","VisualElementDragControls","visualElement","_classCallCheck","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","_createClass","key","value","start","originEvent","_this","_ref","arguments","length","undefined","_ref$snapToCursor","snapToCursor","presenceContext","isPresent","onSessionStart","event","_this$getProps","getProps","dragSnapToOrigin","pauseAnimation","stopAnimation","point","onStart","info","_this$getProps2","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","parseFloat","update","animationState","setActive","onMove","_this$getProps3","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","_this$getProps4","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","_this$getProps5","onDragEnd","_this$visualElement","end","_this$getProps6","_point","_this$getProps7","shouldDrag","axisValue","next","set","_this2","_this$getProps8","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","_this$getProps9","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","_this3","_this$getProps10","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","_objectSpread","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","_this4","_this5","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","_this6","_this6$getProps","_projection$layout$la","scalePositionWithinConstraints","_this7","_this$getProps11","boxProgress","latest","_this$visualElement$g","transformTemplate","style","transform","updateScroll","updateLayout","_this7$constraints$ax","addListeners","_this8","element","stopPointerListener","_this8$getProps","_this8$getProps$dragL","dragListener","measureDragConstraints","_this8$getProps2","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","stopLayoutUpdateListener","_ref2","delta","hasLayoutChanged","motionValue","translate","_props$drag","_props$dragDirectionL","_props$dragPropagatio","_props$dragConstraint","_props$dragElastic","_props$dragMomentum","direction","lockThreshold","Math","abs"],"sources":["C:/Users/manuel/Desktop/nxtlvl-site/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}